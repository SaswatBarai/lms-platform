generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String    @id @default(cuid())
  name                  String    @db.VarChar(255)
  email                 String    @unique @db.VarChar(255)
  password              String    @db.VarChar(255)
  recoveryEmail         String?   @db.VarChar(255)
  address               String
  phone                 String    @unique @db.VarChar(20)
  totalStudents         Int       @default(0)
  totalTeachers         Int       @default(0)
  totalDeans            Int       @default(0)
  totalNonTeachingStaff Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  colleges              College[]
}

model College {
  id               String             @id @default(cuid())
  name             String             @db.VarChar(255)
  organizationId   String
  email            String             @unique @db.VarChar(255)
  deanId           String?
  password         String             @db.VarChar(255)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  recoveryEmail    String?            @db.VarChar(255)
  phone            String             @unique @db.VarChar(20)
  branches         Branch[]
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deans            Dean[]
  departments      Department[]
  hods             Hod[]
  nonTeachingStaff NonTeachingStaff[]
}

model Dean {
  id        String   @id @default(cuid())
  collegeId String
  mailId    String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model Hod {
  id          String       @id @default(cuid())
  collegeId   String
  name        String       @db.VarChar(255)
  email       String       @unique @db.VarChar(255)
  password    String       @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
  college     College      @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model NonTeachingStaff {
  id        String   @id @default(cuid())
  collegeId String
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  role      UserRole @default(studentsection)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String   @unique @db.VarChar(20)
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model Department {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  shortName String    @db.VarChar(50)
  hodId     String?
  collegeId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  college   College   @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  hod       Hod?      @relation(fields: [hodId], references: [id])
  students  Student[]
  teachers  Teacher[]
}

model Student {
  id           String     @id @default(cuid())
  departmentId String
  name         String     @db.VarChar(255)
  email        String     @unique @db.VarChar(255)
  password     String     @db.VarChar(255)
  regNo        String     @unique @db.VarChar(100)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model Teacher {
  id           String     @id @default(cuid())
  departmentId String
  name         String     @db.VarChar(255)
  email        String     @unique @db.VarChar(255)
  password     String     @db.VarChar(255)
  employeeNo   String     @unique @db.VarChar(100)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model Branch {
  id           String     @id @default(cuid())
  name         String     @db.VarChar(255)
  shortName    String     @db.VarChar(50)
  collegeId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  college      College    @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id          String    @id @default(cuid())
  token       String    @unique
  userId      String
  userType    String
  sessionId   String    @unique
  tokenFamily String
  deviceInfo  String?
  ipAddress   String?   @db.VarChar(45)
  lastUsedAt  DateTime  @default(now())
  expiresAt   DateTime
  isRevoked   Boolean   @default(false)
  revokedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId, userType])
  @@index([sessionId])
  @@index([expiresAt])
  @@index([isRevoked])
}

enum UserRole {
  studentsection
  regestral
  adminstractor
}
